package ua.selenium;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.github.bonigarcia.seljup.SeleniumJupiter;

// Generated by Selenium IDE

// EX C
@ExtendWith(SeleniumJupiter.class)
public class AppTest {

    /* 
    EX B

    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;

    @Before
    public void setUp() {
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }
    @After
    public void tearDown() {
        driver.quit();
    }
    
    */


    @Test
    public void ex2(FirefoxDriver driver) {
        // Test name: ex2
        // Step # | name | target | value
        // 1 | open | / | 
        driver.get("https://blazedemo.com/");
        // 2 | setWindowSize | 787x692 | 
        driver.manage().window().setSize(new Dimension(787, 692));
        // 3 | click | name=fromPort | 
        driver.findElement(By.name("fromPort")).click();
        // 4 | select | name=fromPort | label=Boston
        {
            WebElement dropdown = driver.findElement(By.name("fromPort"));
            dropdown.findElement(By.xpath("//option[. = 'Boston']")).click();
        }
        // 5 | click | css=.form-inline:nth-child(1) > option:nth-child(3) | 
        driver.findElement(By.cssSelector(".form-inline:nth-child(1) > option:nth-child(3)")).click();
        // 6 | click | name=toPort | 
        driver.findElement(By.name("toPort")).click();
        // 7 | select | name=toPort | label=London
        {
            WebElement dropdown = driver.findElement(By.name("toPort"));
            dropdown.findElement(By.xpath("//option[. = 'London']")).click();
        }
        // 8 | click | css=.form-inline:nth-child(4) > option:nth-child(3) | 
        driver.findElement(By.cssSelector(".form-inline:nth-child(4) > option:nth-child(3)")).click();
        // 9 | click | css=.btn-primary | 
        driver.findElement(By.cssSelector(".btn-primary")).click();
        // 10 | click | css=tr:nth-child(3) .btn | 
        driver.findElement(By.cssSelector("tr:nth-child(3) .btn")).click();
        // 11 | assertNotChecked | id=rememberMe | 
        assertFalse(driver.findElement(By.id("rememberMe")).isSelected());
        // 12 | click | css=.btn-primary | 
        driver.findElement(By.cssSelector(".btn-primary")).click();
        // 13 | assertTitle | BlazeDemo Confirmation | 
        assertThat(driver.getTitle(), is("BlazeDemo Confirmation"));
    }
}